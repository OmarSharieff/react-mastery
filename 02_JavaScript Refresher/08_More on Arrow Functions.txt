**More on the Arrow Function Syntax**  

When working with Arrow Functions, you have a couple of **syntax shortcuts** available.  
Most importantly, you should know about the following alternatives:  

---

### **1) Omitting Parameter List Parentheses**  
- **For a single parameter:**  
  If your arrow function takes exactly one parameter, you may omit the wrapping parentheses.  

  **Instead of:**  
  ```javascript
  (userName) => { ... }
  ```  

  **You could write:**  
  ```javascript
  userName => { ... }
  ```  

- **Note:**  
  - If your function takes **no parameters**, parentheses **must not be omitted**:  
    ```javascript
    () => { ... }
    ```  
    This is the only correct form.  

  - If your function takes **more than one parameter**, parentheses **must not be omitted**:  
    ```javascript
    (userName, userAge) => { ... }
    ```  

    The following would be invalid:  
    ```javascript
    userName, userAge => { ... }
    ```  

---

### **2) Omitting Function Body Curly Braces**  
- If your arrow function contains **only a return statement**, you may omit the curly braces and the `return` keyword.  

  **Instead of:**  
  ```javascript
  number => { 
    return number * 3;
  }
  ```  

  **You could write:**  
  ```javascript
  number => number * 3;
  ```  

- **Invalid examples:**  
  ```javascript
  number => return number * 3; // Invalid: return keyword must also be omitted!
  number => if (number === 2) { return 5 }; // Invalid: if statements can't be returned
  ```  

---

### **3) Special Case: Returning an Object**  
- If you try to return a JavaScript object using the shorter syntax, you may run into issues.  

  **Invalid example:**  
  ```javascript
  number => { age: number }; 
  // Invalid: JavaScript treats the curly braces as function body wrappers.
  ```  

- To resolve this, wrap the object in **parentheses**:  
  ```javascript
  number => ({ age: number });
  ```  
  By wrapping the object in parentheses, JavaScript understands that the curly braces are for creating an object and not for defining a function body.  

--- 